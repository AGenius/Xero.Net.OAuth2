/* 
 * Xero Bank Feeds API
 *
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

// The version of the OpenAPI document: 2.38.0


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Xero.Net.Api.Client;
using Xero.Net.Api.Model.Bankfeeds;
using System.Threading;

namespace Xero.Net.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBankFeedsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create one or more new feed connection
        /// </summary>
        /// <remarks>
        /// By passing in the FeedConnections array object in the body, you can create one or more new feed connections
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="feedConnections">Feed Connection(s) array object in the body</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of FeedConnections</returns>
        System.Threading.Tasks.Task<FeedConnections> CreateFeedConnectionsAsync (string accessToken, string xeroTenantId, FeedConnections feedConnections, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create one or more new feed connection
        /// </summary>
        /// <remarks>
        /// By passing in the FeedConnections array object in the body, you can create one or more new feed connections
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="feedConnections">Feed Connection(s) array object in the body</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (FeedConnections)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedConnections>> CreateFeedConnectionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, FeedConnections feedConnections, CancellationToken cancellationToken = default);
        /// <summary>
        /// Creates one or more new statements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="statements">Statements array of objects in the body (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Statements</returns>
        System.Threading.Tasks.Task<Statements> CreateStatementsAsync (string accessToken, string xeroTenantId, Statements statements = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates one or more new statements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="statements">Statements array of objects in the body (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Statements)</returns>
        System.Threading.Tasks.Task<ApiResponse<Statements>> CreateStatementsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Statements statements = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an existing feed connection
        /// </summary>
        /// <remarks>
        /// By passing in FeedConnections array object in the body, you can delete a feed connection.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="feedConnections">Feed Connections array object in the body</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of FeedConnections</returns>
        System.Threading.Tasks.Task<FeedConnections> DeleteFeedConnectionsAsync (string accessToken, string xeroTenantId, FeedConnections feedConnections, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an existing feed connection
        /// </summary>
        /// <remarks>
        /// By passing in FeedConnections array object in the body, you can delete a feed connection.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="feedConnections">Feed Connections array object in the body</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (FeedConnections)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedConnections>> DeleteFeedConnectionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, FeedConnections feedConnections, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve single feed connection based on a unique id provided
        /// </summary>
        /// <remarks>
        /// By passing in a FeedConnection Id options, you can search for matching feed connections
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Unique identifier for retrieving single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of FeedConnection</returns>
        System.Threading.Tasks.Task<FeedConnection> GetFeedConnectionAsync (string accessToken, string xeroTenantId, Guid id, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve single feed connection based on a unique id provided
        /// </summary>
        /// <remarks>
        /// By passing in a FeedConnection Id options, you can search for matching feed connections
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Unique identifier for retrieving single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (FeedConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedConnection>> GetFeedConnectionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid id, CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for feed connections
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available feed connections in the system.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)</param>
        /// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of FeedConnections</returns>
        System.Threading.Tasks.Task<FeedConnections> GetFeedConnectionsAsync (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Searches for feed connections
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available feed connections in the system.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)</param>
        /// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (FeedConnections)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedConnections>> GetFeedConnectionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve single statement based on unique id provided
        /// </summary>
        /// <remarks>
        /// By passing in a statement id, you can search for matching statements
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="statementId">statement id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Statement</returns>
        System.Threading.Tasks.Task<Statement> GetStatementAsync (string accessToken, string xeroTenantId, Guid statementId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve single statement based on unique id provided
        /// </summary>
        /// <remarks>
        /// By passing in a statement id, you can search for matching statements
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="statementId">statement id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Statement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Statement>> GetStatementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid statementId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve all statements
        /// </summary>
        /// <remarks>
        /// By passing in parameters, you can search for matching statements
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">unique id for single object (optional)</param>
        /// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
        /// <param name="xeroApplicationId"> (optional, default to &quot;00000000-0000-0000-0000-0000000010000&quot;)</param>
        /// <param name="xeroUserId"> (optional, default to &quot;00000000-0000-0000-0000-0000030000000&quot;)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Statements</returns>
        System.Threading.Tasks.Task<Statements> GetStatementsAsync (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, string xeroApplicationId = null, string xeroUserId = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve all statements
        /// </summary>
        /// <remarks>
        /// By passing in parameters, you can search for matching statements
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">unique id for single object (optional)</param>
        /// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
        /// <param name="xeroApplicationId"> (optional, default to &quot;00000000-0000-0000-0000-0000000010000&quot;)</param>
        /// <param name="xeroUserId"> (optional, default to &quot;00000000-0000-0000-0000-0000030000000&quot;)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Statements)</returns>
        System.Threading.Tasks.Task<ApiResponse<Statements>> GetStatementsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, string xeroApplicationId = null, string xeroUserId = null, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBankFeedsApi : IBankFeedsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BankFeedsApi : IBankFeedsApi
    {
        private Xero.Net.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BankFeedsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BankFeedsApi() : this((string) null)
        {
            this.Configuration = Xero.Net.Api.Client.Configuration.MergeConfigurations(
                Xero.Net.Api.Client.GlobalConfiguration.Instance,
                new Xero.Net.Api.Client.Configuration { BasePath = "https://api.xero.com/bankfeeds.xro/1.0" }
            );
            this.AsynchronousClient = new Xero.Net.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.Net.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BankFeedsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BankFeedsApi(String basePath)
        {
            this.Configuration = Xero.Net.Api.Client.Configuration.MergeConfigurations(
                Xero.Net.Api.Client.GlobalConfiguration.Instance,
                new Xero.Net.Api.Client.Configuration { BasePath = basePath }
            );
            this.AsynchronousClient = new Xero.Net.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.Net.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BankFeedsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BankFeedsApi(Xero.Net.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Xero.Net.Api.Client.Configuration.MergeConfigurations(
                Xero.Net.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.AsynchronousClient = new Xero.Net.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Xero.Net.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BankFeedsApi(Xero.Net.Api.Client.ISynchronousClient client,Xero.Net.Api.Client.IAsynchronousClient asyncClient, Xero.Net.Api.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Xero.Net.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Xero.Net.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Xero.Net.Api.Client.IReadableConfiguration Configuration {get; set;}


        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xero.Net.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Create one or more new feed connection By passing in the FeedConnections array object in the body, you can create one or more new feed connections
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="feedConnections">Feed Connection(s) array object in the body</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of FeedConnections</returns>
        public async System.Threading.Tasks.Task<FeedConnections> CreateFeedConnectionsAsync (string accessToken, string xeroTenantId, FeedConnections feedConnections, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<FeedConnections> localVarResponse = await CreateFeedConnectionsAsyncWithHttpInfo(accessToken, xeroTenantId, feedConnections, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create one or more new feed connection By passing in the FeedConnections array object in the body, you can create one or more new feed connections
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="feedConnections">Feed Connection(s) array object in the body</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (FeedConnections)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<FeedConnections>> CreateFeedConnectionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, FeedConnections feedConnections, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling BankFeedsApi->CreateFeedConnections");

            // verify the required parameter 'feedConnections' is set
            if (feedConnections == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'feedConnections' when calling BankFeedsApi->CreateFeedConnections");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = feedConnections;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<FeedConnections>("/FeedConnections", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateFeedConnections", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates one or more new statements 
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="statements">Statements array of objects in the body (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Statements</returns>
        public async System.Threading.Tasks.Task<Statements> CreateStatementsAsync (string accessToken, string xeroTenantId, Statements statements = null, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<Statements> localVarResponse = await CreateStatementsAsyncWithHttpInfo(accessToken, xeroTenantId, statements, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates one or more new statements 
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="statements">Statements array of objects in the body (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Statements)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Statements>> CreateStatementsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Statements statements = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling BankFeedsApi->CreateStatements");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "application/problem+json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = statements;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Statements>("/Statements", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateStatements", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Delete an existing feed connection By passing in FeedConnections array object in the body, you can delete a feed connection.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="feedConnections">Feed Connections array object in the body</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of FeedConnections</returns>
        public async System.Threading.Tasks.Task<FeedConnections> DeleteFeedConnectionsAsync (string accessToken, string xeroTenantId, FeedConnections feedConnections, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<FeedConnections> localVarResponse = await DeleteFeedConnectionsAsyncWithHttpInfo(accessToken, xeroTenantId, feedConnections, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing feed connection By passing in FeedConnections array object in the body, you can delete a feed connection.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="feedConnections">Feed Connections array object in the body</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (FeedConnections)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<FeedConnections>> DeleteFeedConnectionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, FeedConnections feedConnections, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling BankFeedsApi->DeleteFeedConnections");

            // verify the required parameter 'feedConnections' is set
            if (feedConnections == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'feedConnections' when calling BankFeedsApi->DeleteFeedConnections");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = feedConnections;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<FeedConnections>("/FeedConnections/DeleteRequests", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteFeedConnections", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieve single feed connection based on a unique id provided By passing in a FeedConnection Id options, you can search for matching feed connections
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Unique identifier for retrieving single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of FeedConnection</returns>
        public async System.Threading.Tasks.Task<FeedConnection> GetFeedConnectionAsync (string accessToken, string xeroTenantId, Guid id, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<FeedConnection> localVarResponse = await GetFeedConnectionAsyncWithHttpInfo(accessToken, xeroTenantId, id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve single feed connection based on a unique id provided By passing in a FeedConnection Id options, you can search for matching feed connections
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Unique identifier for retrieving single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (FeedConnection)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<FeedConnection>> GetFeedConnectionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid id, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling BankFeedsApi->GetFeedConnection");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'id' when calling BankFeedsApi->GetFeedConnection");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Xero.Net.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<FeedConnection>("/FeedConnections/{id}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFeedConnection", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Searches for feed connections By passing in the appropriate options, you can search for available feed connections in the system.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)</param>
        /// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of FeedConnections</returns>
        public async System.Threading.Tasks.Task<FeedConnections> GetFeedConnectionsAsync (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<FeedConnections> localVarResponse = await GetFeedConnectionsAsyncWithHttpInfo(accessToken, xeroTenantId, page, pageSize, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for feed connections By passing in the appropriate options, you can search for available feed connections in the system.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)</param>
        /// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (FeedConnections)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<FeedConnections>> GetFeedConnectionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling BankFeedsApi->GetFeedConnections");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (pageSize != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<FeedConnections>("/FeedConnections", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFeedConnections", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieve single statement based on unique id provided By passing in a statement id, you can search for matching statements
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="statementId">statement id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Statement</returns>
        public async System.Threading.Tasks.Task<Statement> GetStatementAsync (string accessToken, string xeroTenantId, Guid statementId, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<Statement> localVarResponse = await GetStatementAsyncWithHttpInfo(accessToken, xeroTenantId, statementId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve single statement based on unique id provided By passing in a statement id, you can search for matching statements
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="statementId">statement id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Statement)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Statement>> GetStatementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid statementId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling BankFeedsApi->GetStatement");

            // verify the required parameter 'statementId' is set
            if (statementId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'statementId' when calling BankFeedsApi->GetStatement");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (statementId != null)
                requestOptions.PathParameters.Add("statementId", Xero.Net.Api.Client.ClientUtils.ParameterToString(statementId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Statement>("/Statements/{statementId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetStatement", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieve all statements By passing in parameters, you can search for matching statements
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">unique id for single object (optional)</param>
        /// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
        /// <param name="xeroApplicationId"> (optional, default to &quot;00000000-0000-0000-0000-0000000010000&quot;)</param>
        /// <param name="xeroUserId"> (optional, default to &quot;00000000-0000-0000-0000-0000030000000&quot;)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Statements</returns>
        public async System.Threading.Tasks.Task<Statements> GetStatementsAsync (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, string xeroApplicationId = null, string xeroUserId = null, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<Statements> localVarResponse = await GetStatementsAsyncWithHttpInfo(accessToken, xeroTenantId, page, pageSize, xeroApplicationId, xeroUserId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all statements By passing in parameters, you can search for matching statements
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">unique id for single object (optional)</param>
        /// <param name="pageSize">Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)</param>
        /// <param name="xeroApplicationId"> (optional, default to &quot;00000000-0000-0000-0000-0000000010000&quot;)</param>
        /// <param name="xeroUserId"> (optional, default to &quot;00000000-0000-0000-0000-0000030000000&quot;)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Statements)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Statements>> GetStatementsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, string xeroApplicationId = null, string xeroUserId = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling BankFeedsApi->GetStatements");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "application/problem+json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (pageSize != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (xeroApplicationId != null)
                requestOptions.HeaderParameters.Add("Xero-Application-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroApplicationId)); // header parameter
            if (xeroUserId != null)
                requestOptions.HeaderParameters.Add("Xero-User-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroUserId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Statements>("/Statements", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetStatements", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
