/* 
 * Xero Projects API
 *
 * This is the Xero Projects API
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

// The version of the OpenAPI document: 2.38.0


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Xero.Net.Api.Client;
using Xero.Net.Api.Model.Project;
using System.Threading;

namespace Xero.Net.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create one or more new projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectCreateOrUpdate">Create a new project with ProjectCreateOrUpdate object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> CreateProjectAsync (string accessToken, string xeroTenantId, ProjectCreateOrUpdate projectCreateOrUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create one or more new projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectCreateOrUpdate">Create a new project with ProjectCreateOrUpdate object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, ProjectCreateOrUpdate projectCreateOrUpdate, CancellationToken cancellationToken = default);
        /// <summary>
        /// Allows you to create a task
        /// </summary>
        /// <remarks>
        /// Allows you to create a specific task
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can create a task on a specified projectId</param>
        /// <param name="taskCreateOrUpdate">The task object you are creating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> CreateTaskAsync (string accessToken, string xeroTenantId, Guid projectId, TaskCreateOrUpdate taskCreateOrUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Allows you to create a task
        /// </summary>
        /// <remarks>
        /// Allows you to create a specific task
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can create a task on a specified projectId</param>
        /// <param name="taskCreateOrUpdate">The task object you are creating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> CreateTaskAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, TaskCreateOrUpdate taskCreateOrUpdate, CancellationToken cancellationToken = default);
        /// <summary>
        /// Creates a time entry for a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to create a specific task
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryCreateOrUpdate">The time entry object you are creating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of TimeEntry</returns>
        System.Threading.Tasks.Task<TimeEntry> CreateTimeEntryAsync (string accessToken, string xeroTenantId, Guid projectId, TimeEntryCreateOrUpdate timeEntryCreateOrUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a time entry for a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to create a specific task
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryCreateOrUpdate">The time entry object you are creating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (TimeEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeEntry>> CreateTimeEntryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, TimeEntryCreateOrUpdate timeEntryCreateOrUpdate, CancellationToken cancellationToken = default);
        /// <summary>
        /// Allows you to delete a task
        /// </summary>
        /// <remarks>
        /// Allows you to delete a specific task
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskAsync (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Allows you to delete a task
        /// </summary>
        /// <remarks>
        /// Allows you to delete a specific task
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Deletes a time entry for a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to delete a specific time entry
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTimeEntryAsync (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a time entry for a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to delete a specific time entry
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTimeEntryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves a single project
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve a specific project using the projectId
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> GetProjectAsync (string accessToken, string xeroTenantId, Guid projectId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a single project
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve a specific project using the projectId
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> GetProjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves a list of all project users
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve the users on a projects.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ProjectUsers</returns>
        System.Threading.Tasks.Task<ProjectUsers> GetProjectUsersAsync (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a list of all project users
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve the users on a projects.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (ProjectUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectUsers>> GetProjectUsersAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves all projects
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve, create and update projects.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectIds">Search for all projects that match a comma separated list of projectIds (optional)</param>
        /// <param name="contactID">Filter for projects for a specific contact (optional)</param>
        /// <param name="states">Filter for projects in a particular state (INPROGRESS or CLOSED) (optional)</param>
        /// <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Projects</returns>
        System.Threading.Tasks.Task<Projects> GetProjectsAsync (string accessToken, string xeroTenantId, List<Guid> projectIds = null, Guid? contactID = null, string states = null, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all projects
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve, create and update projects.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectIds">Search for all projects that match a comma separated list of projectIds (optional)</param>
        /// <param name="contactID">Filter for projects for a specific contact (optional)</param>
        /// <param name="states">Filter for projects in a particular state (INPROGRESS or CLOSED) (optional)</param>
        /// <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        System.Threading.Tasks.Task<ApiResponse<Projects>> GetProjectsAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Guid> projectIds = null, Guid? contactID = null, string states = null, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves a single project task
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve a specific project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID}</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> GetTaskAsync (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a single project task
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve a specific project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID}</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves all project tasks
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve a specific project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
        /// <param name="taskIds">Search for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds&#x3D;{taskID},{taskID} (optional)</param>
        /// <param name="chargeType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Tasks</returns>
        System.Threading.Tasks.Task<Tasks> GetTasksAsync (string accessToken, string xeroTenantId, Guid projectId, int? page = null, int? pageSize = null, string taskIds = null, ChargeType? chargeType = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all project tasks
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve a specific project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
        /// <param name="taskIds">Search for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds&#x3D;{taskID},{taskID} (optional)</param>
        /// <param name="chargeType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Tasks)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tasks>> GetTasksAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, int? page = null, int? pageSize = null, string taskIds = null, ChargeType? chargeType = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves all time entries associated with a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve the time entries associated with a specific project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">Identifier of the project, that the task (which the time entry is logged against) belongs to.</param>
        /// <param name="userId">The xero user identifier of the person who logged time. (optional)</param>
        /// <param name="taskId">Identifier of the task that time entry is logged against. (optional)</param>
        /// <param name="invoiceId">Finds all time entries for this invoice. (optional)</param>
        /// <param name="contactId">Finds all time entries for this contact identifier. (optional)</param>
        /// <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
        /// <param name="states">Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified. (optional)</param>
        /// <param name="isChargeable">Finds all time entries which relate to tasks with the charge type &#x60;TIME&#x60; or &#x60;FIXED&#x60;. (optional)</param>
        /// <param name="dateAfterUtc">ISO 8601 UTC date. Finds all time entries on or after this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
        /// <param name="dateBeforeUtc">ISO 8601 UTC date. Finds all time entries on or before this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of TimeEntries</returns>
        System.Threading.Tasks.Task<TimeEntries> GetTimeEntriesAsync (string accessToken, string xeroTenantId, Guid projectId, Guid? userId = null, Guid? taskId = null, Guid? invoiceId = null, Guid? contactId = null, int? page = null, int? pageSize = null, List<string> states = null, bool? isChargeable = null, DateTime? dateAfterUtc = null, DateTime? dateBeforeUtc = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all time entries associated with a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to retrieve the time entries associated with a specific project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">Identifier of the project, that the task (which the time entry is logged against) belongs to.</param>
        /// <param name="userId">The xero user identifier of the person who logged time. (optional)</param>
        /// <param name="taskId">Identifier of the task that time entry is logged against. (optional)</param>
        /// <param name="invoiceId">Finds all time entries for this invoice. (optional)</param>
        /// <param name="contactId">Finds all time entries for this contact identifier. (optional)</param>
        /// <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
        /// <param name="states">Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified. (optional)</param>
        /// <param name="isChargeable">Finds all time entries which relate to tasks with the charge type &#x60;TIME&#x60; or &#x60;FIXED&#x60;. (optional)</param>
        /// <param name="dateAfterUtc">ISO 8601 UTC date. Finds all time entries on or after this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
        /// <param name="dateBeforeUtc">ISO 8601 UTC date. Finds all time entries on or before this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (TimeEntries)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeEntries>> GetTimeEntriesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid? userId = null, Guid? taskId = null, Guid? invoiceId = null, Guid? contactId = null, int? page = null, int? pageSize = null, List<string> states = null, bool? isChargeable = null, DateTime? dateAfterUtc = null, DateTime? dateBeforeUtc = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves a single time entry for a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to get a single time entry in a project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of TimeEntry</returns>
        System.Threading.Tasks.Task<TimeEntry> GetTimeEntryAsync (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a single time entry for a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to get a single time entry in a project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (TimeEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeEntry>> GetTimeEntryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, CancellationToken cancellationToken = default);
        /// <summary>
        /// creates a project for the specified contact
        /// </summary>
        /// <remarks>
        /// Allows you to update a specific projects.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="projectPatch">Update the status of an existing Project</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchProjectAsync (string accessToken, string xeroTenantId, Guid projectId, ProjectPatch projectPatch, CancellationToken cancellationToken = default);

        /// <summary>
        /// creates a project for the specified contact
        /// </summary>
        /// <remarks>
        /// Allows you to update a specific projects.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="projectPatch">Update the status of an existing Project</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchProjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, ProjectPatch projectPatch, CancellationToken cancellationToken = default);
        /// <summary>
        /// Updates a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to update a specific projects.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="projectCreateOrUpdate">Request of type ProjectCreateOrUpdate</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProjectAsync (string accessToken, string xeroTenantId, Guid projectId, ProjectCreateOrUpdate projectCreateOrUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to update a specific projects.
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="projectCreateOrUpdate">Request of type ProjectCreateOrUpdate</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, ProjectCreateOrUpdate projectCreateOrUpdate, CancellationToken cancellationToken = default);
        /// <summary>
        /// Allows you to update a task
        /// </summary>
        /// <remarks>
        /// Allows you to update a specific task
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="taskCreateOrUpdate">The task object you are updating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTaskAsync (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, TaskCreateOrUpdate taskCreateOrUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Allows you to update a task
        /// </summary>
        /// <remarks>
        /// Allows you to update a specific task
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="taskCreateOrUpdate">The task object you are updating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTaskAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, TaskCreateOrUpdate taskCreateOrUpdate, CancellationToken cancellationToken = default);
        /// <summary>
        /// Updates a time entry for a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to update time entry in a project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
        /// <param name="timeEntryCreateOrUpdate">The time entry object you are updating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTimeEntryAsync (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, TimeEntryCreateOrUpdate timeEntryCreateOrUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a time entry for a specific project
        /// </summary>
        /// <remarks>
        /// Allows you to update time entry in a project
        /// </remarks>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
        /// <param name="timeEntryCreateOrUpdate">The time entry object you are updating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTimeEntryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, TimeEntryCreateOrUpdate timeEntryCreateOrUpdate, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApi : IProjectApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectApi : IProjectApi
    {
        private Xero.Net.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi() : this((string) null)
        {
            this.Configuration = Xero.Net.Api.Client.Configuration.MergeConfigurations(
                Xero.Net.Api.Client.GlobalConfiguration.Instance,
                new Xero.Net.Api.Client.Configuration { BasePath = "https://api.xero.com/projects.xro/2.0" }
            );
            this.AsynchronousClient = new Xero.Net.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.Net.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi(String basePath)
        {
            this.Configuration = Xero.Net.Api.Client.Configuration.MergeConfigurations(
                Xero.Net.Api.Client.GlobalConfiguration.Instance,
                new Xero.Net.Api.Client.Configuration { BasePath = basePath }
            );
            this.AsynchronousClient = new Xero.Net.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.Net.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectApi(Xero.Net.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Xero.Net.Api.Client.Configuration.MergeConfigurations(
                Xero.Net.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.AsynchronousClient = new Xero.Net.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Xero.Net.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProjectApi(Xero.Net.Api.Client.ISynchronousClient client,Xero.Net.Api.Client.IAsynchronousClient asyncClient, Xero.Net.Api.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Xero.Net.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Xero.Net.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Xero.Net.Api.Client.IReadableConfiguration Configuration {get; set;}


        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xero.Net.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Create one or more new projects 
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectCreateOrUpdate">Create a new project with ProjectCreateOrUpdate object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> CreateProjectAsync (string accessToken, string xeroTenantId, ProjectCreateOrUpdate projectCreateOrUpdate, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<Project> localVarResponse = await CreateProjectAsyncWithHttpInfo(accessToken, xeroTenantId, projectCreateOrUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create one or more new projects 
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectCreateOrUpdate">Create a new project with ProjectCreateOrUpdate object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, ProjectCreateOrUpdate projectCreateOrUpdate, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->CreateProject");

            // verify the required parameter 'projectCreateOrUpdate' is set
            if (projectCreateOrUpdate == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectCreateOrUpdate' when calling ProjectApi->CreateProject");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = projectCreateOrUpdate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Project>("/Projects", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateProject", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a task Allows you to create a specific task
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can create a task on a specified projectId</param>
        /// <param name="taskCreateOrUpdate">The task object you are creating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> CreateTaskAsync (string accessToken, string xeroTenantId, Guid projectId, TaskCreateOrUpdate taskCreateOrUpdate, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<Task> localVarResponse = await CreateTaskAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, taskCreateOrUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a task Allows you to create a specific task
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can create a task on a specified projectId</param>
        /// <param name="taskCreateOrUpdate">The task object you are creating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Task>> CreateTaskAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, TaskCreateOrUpdate taskCreateOrUpdate, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->CreateTask");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->CreateTask");

            // verify the required parameter 'taskCreateOrUpdate' is set
            if (taskCreateOrUpdate == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'taskCreateOrUpdate' when calling ProjectApi->CreateTask");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = taskCreateOrUpdate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Task>("/Projects/{projectId}/Tasks", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a time entry for a specific project Allows you to create a specific task
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryCreateOrUpdate">The time entry object you are creating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of TimeEntry</returns>
        public async System.Threading.Tasks.Task<TimeEntry> CreateTimeEntryAsync (string accessToken, string xeroTenantId, Guid projectId, TimeEntryCreateOrUpdate timeEntryCreateOrUpdate, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<TimeEntry> localVarResponse = await CreateTimeEntryAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, timeEntryCreateOrUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a time entry for a specific project Allows you to create a specific task
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryCreateOrUpdate">The time entry object you are creating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (TimeEntry)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<TimeEntry>> CreateTimeEntryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, TimeEntryCreateOrUpdate timeEntryCreateOrUpdate, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->CreateTimeEntry");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->CreateTimeEntry");

            // verify the required parameter 'timeEntryCreateOrUpdate' is set
            if (timeEntryCreateOrUpdate == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'timeEntryCreateOrUpdate' when calling ProjectApi->CreateTimeEntry");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = timeEntryCreateOrUpdate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TimeEntry>("/Projects/{projectId}/Time", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTimeEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to delete a task Allows you to delete a specific task
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskAsync (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, CancellationToken cancellationToken = default)
        {
             await DeleteTaskAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, taskId);

        }

        /// <summary>
        /// Allows you to delete a task Allows you to delete a specific task
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Object>> DeleteTaskAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->DeleteTask");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->DeleteTask");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'taskId' when calling ProjectApi->DeleteTask");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (taskId != null)
                requestOptions.PathParameters.Add("taskId", Xero.Net.Api.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/Projects/{projectId}/Tasks/{taskId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Deletes a time entry for a specific project Allows you to delete a specific time entry
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTimeEntryAsync (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, CancellationToken cancellationToken = default)
        {
             await DeleteTimeEntryAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, timeEntryId);

        }

        /// <summary>
        /// Deletes a time entry for a specific project Allows you to delete a specific time entry
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Object>> DeleteTimeEntryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->DeleteTimeEntry");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->DeleteTimeEntry");

            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'timeEntryId' when calling ProjectApi->DeleteTimeEntry");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeEntryId != null)
                requestOptions.PathParameters.Add("timeEntryId", Xero.Net.Api.Client.ClientUtils.ParameterToString(timeEntryId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/Projects/{projectId}/Time/{timeEntryId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTimeEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a single project Allows you to retrieve a specific project using the projectId
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> GetProjectAsync (string accessToken, string xeroTenantId, Guid projectId, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<Project> localVarResponse = await GetProjectAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a single project Allows you to retrieve a specific project using the projectId
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Project>> GetProjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->GetProject");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetProject");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Project>("/Projects/{projectId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProject", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a list of all project users Allows you to retrieve the users on a projects.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ProjectUsers</returns>
        public async System.Threading.Tasks.Task<ProjectUsers> GetProjectUsersAsync (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<ProjectUsers> localVarResponse = await GetProjectUsersAsyncWithHttpInfo(accessToken, xeroTenantId, page, pageSize, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a list of all project users Allows you to retrieve the users on a projects.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (ProjectUsers)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<ProjectUsers>> GetProjectUsersAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->GetProjectUsers");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (pageSize != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ProjectUsers>("/ProjectsUsers", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProjectUsers", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves all projects Allows you to retrieve, create and update projects.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectIds">Search for all projects that match a comma separated list of projectIds (optional)</param>
        /// <param name="contactID">Filter for projects for a specific contact (optional)</param>
        /// <param name="states">Filter for projects in a particular state (INPROGRESS or CLOSED) (optional)</param>
        /// <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Projects</returns>
        public async System.Threading.Tasks.Task<Projects> GetProjectsAsync (string accessToken, string xeroTenantId, List<Guid> projectIds = null, Guid? contactID = null, string states = null, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<Projects> localVarResponse = await GetProjectsAsyncWithHttpInfo(accessToken, xeroTenantId, projectIds, contactID, states, page, pageSize, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves all projects Allows you to retrieve, create and update projects.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectIds">Search for all projects that match a comma separated list of projectIds (optional)</param>
        /// <param name="contactID">Filter for projects for a specific contact (optional)</param>
        /// <param name="states">Filter for projects in a particular state (INPROGRESS or CLOSED) (optional)</param>
        /// <param name="page">set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional, default to 1)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Projects>> GetProjectsAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Guid> projectIds = null, Guid? contactID = null, string states = null, int? page = null, int? pageSize = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->GetProjects");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (projectIds != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("multi", "projectIds", projectIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (contactID != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "contactID", contactID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (states != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "states", states))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (pageSize != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Projects>("/Projects", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProjects", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a single project task Allows you to retrieve a specific project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID}</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> GetTaskAsync (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<Task> localVarResponse = await GetTaskAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, taskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a single project task Allows you to retrieve a specific project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID}</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Task>> GetTaskAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->GetTask");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetTask");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'taskId' when calling ProjectApi->GetTask");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (taskId != null)
                requestOptions.PathParameters.Add("taskId", Xero.Net.Api.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Task>("/Projects/{projectId}/Tasks/{taskId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves all project tasks Allows you to retrieve a specific project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
        /// <param name="taskIds">Search for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds&#x3D;{taskID},{taskID} (optional)</param>
        /// <param name="chargeType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Tasks</returns>
        public async System.Threading.Tasks.Task<Tasks> GetTasksAsync (string accessToken, string xeroTenantId, Guid projectId, int? page = null, int? pageSize = null, string taskIds = null, ChargeType? chargeType = null, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<Tasks> localVarResponse = await GetTasksAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, page, pageSize, taskIds, chargeType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves all project tasks Allows you to retrieve a specific project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
        /// <param name="taskIds">Search for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds&#x3D;{taskID},{taskID} (optional)</param>
        /// <param name="chargeType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Tasks)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Tasks>> GetTasksAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, int? page = null, int? pageSize = null, string taskIds = null, ChargeType? chargeType = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->GetTasks");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetTasks");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            if (page != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (pageSize != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (taskIds != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "taskIds", taskIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (chargeType != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "chargeType", chargeType))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Tasks>("/Projects/{projectId}/Tasks", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTasks", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves all time entries associated with a specific project Allows you to retrieve the time entries associated with a specific project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">Identifier of the project, that the task (which the time entry is logged against) belongs to.</param>
        /// <param name="userId">The xero user identifier of the person who logged time. (optional)</param>
        /// <param name="taskId">Identifier of the task that time entry is logged against. (optional)</param>
        /// <param name="invoiceId">Finds all time entries for this invoice. (optional)</param>
        /// <param name="contactId">Finds all time entries for this contact identifier. (optional)</param>
        /// <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
        /// <param name="states">Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified. (optional)</param>
        /// <param name="isChargeable">Finds all time entries which relate to tasks with the charge type &#x60;TIME&#x60; or &#x60;FIXED&#x60;. (optional)</param>
        /// <param name="dateAfterUtc">ISO 8601 UTC date. Finds all time entries on or after this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
        /// <param name="dateBeforeUtc">ISO 8601 UTC date. Finds all time entries on or before this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of TimeEntries</returns>
        public async System.Threading.Tasks.Task<TimeEntries> GetTimeEntriesAsync (string accessToken, string xeroTenantId, Guid projectId, Guid? userId = null, Guid? taskId = null, Guid? invoiceId = null, Guid? contactId = null, int? page = null, int? pageSize = null, List<string> states = null, bool? isChargeable = null, DateTime? dateAfterUtc = null, DateTime? dateBeforeUtc = null, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<TimeEntries> localVarResponse = await GetTimeEntriesAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, userId, taskId, invoiceId, contactId, page, pageSize, states, isChargeable, dateAfterUtc, dateBeforeUtc, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves all time entries associated with a specific project Allows you to retrieve the time entries associated with a specific project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">Identifier of the project, that the task (which the time entry is logged against) belongs to.</param>
        /// <param name="userId">The xero user identifier of the person who logged time. (optional)</param>
        /// <param name="taskId">Identifier of the task that time entry is logged against. (optional)</param>
        /// <param name="invoiceId">Finds all time entries for this invoice. (optional)</param>
        /// <param name="contactId">Finds all time entries for this contact identifier. (optional)</param>
        /// <param name="page">Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. (optional)</param>
        /// <param name="pageSize">Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. (optional)</param>
        /// <param name="states">Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified. (optional)</param>
        /// <param name="isChargeable">Finds all time entries which relate to tasks with the charge type &#x60;TIME&#x60; or &#x60;FIXED&#x60;. (optional)</param>
        /// <param name="dateAfterUtc">ISO 8601 UTC date. Finds all time entries on or after this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
        /// <param name="dateBeforeUtc">ISO 8601 UTC date. Finds all time entries on or before this date filtered on the &#x60;dateUtc&#x60; field. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (TimeEntries)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<TimeEntries>> GetTimeEntriesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid? userId = null, Guid? taskId = null, Guid? invoiceId = null, Guid? contactId = null, int? page = null, int? pageSize = null, List<string> states = null, bool? isChargeable = null, DateTime? dateAfterUtc = null, DateTime? dateBeforeUtc = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->GetTimeEntries");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetTimeEntries");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            if (userId != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "userId", userId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (taskId != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (invoiceId != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "invoiceId", invoiceId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (contactId != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "contactId", contactId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (pageSize != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (states != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("multi", "states", states))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (isChargeable != null)
            {
              requestOptions.QueryParameters.Add("isChargeable", isChargeable.ToString());
            }


            if (dateAfterUtc != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "dateAfterUtc", dateAfterUtc))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (dateBeforeUtc != null)
            {
                foreach (var kvp in Xero.Net.Api.Client.ClientUtils.ParameterToMultiMap("", "dateBeforeUtc", dateBeforeUtc))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TimeEntries>("/Projects/{projectId}/Time", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimeEntries", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a single time entry for a specific project Allows you to get a single time entry in a project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of TimeEntry</returns>
        public async System.Threading.Tasks.Task<TimeEntry> GetTimeEntryAsync (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, CancellationToken cancellationToken = default)
        {
             Xero.Net.Api.Client.ApiResponse<TimeEntry> localVarResponse = await GetTimeEntryAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, timeEntryId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a single time entry for a specific project Allows you to get a single time entry in a project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (TimeEntry)</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<TimeEntry>> GetTimeEntryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->GetTimeEntry");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetTimeEntry");

            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'timeEntryId' when calling ProjectApi->GetTimeEntry");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeEntryId != null)
                requestOptions.PathParameters.Add("timeEntryId", Xero.Net.Api.Client.ClientUtils.ParameterToString(timeEntryId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TimeEntry>("/Projects/{projectId}/Time/{timeEntryId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimeEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates a project for the specified contact Allows you to update a specific projects.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="projectPatch">Update the status of an existing Project</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchProjectAsync (string accessToken, string xeroTenantId, Guid projectId, ProjectPatch projectPatch, CancellationToken cancellationToken = default)
        {
             await PatchProjectAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, projectPatch);

        }

        /// <summary>
        /// creates a project for the specified contact Allows you to update a specific projects.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="projectPatch">Update the status of an existing Project</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Object>> PatchProjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, ProjectPatch projectPatch, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->PatchProject");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->PatchProject");

            // verify the required parameter 'projectPatch' is set
            if (projectPatch == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectPatch' when calling ProjectApi->PatchProject");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = projectPatch;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PatchAsync<Object>("/Projects/{projectId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PatchProject", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates a specific project Allows you to update a specific projects.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="projectCreateOrUpdate">Request of type ProjectCreateOrUpdate</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProjectAsync (string accessToken, string xeroTenantId, Guid projectId, ProjectCreateOrUpdate projectCreateOrUpdate, CancellationToken cancellationToken = default)
        {
             await UpdateProjectAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, projectCreateOrUpdate);

        }

        /// <summary>
        /// Updates a specific project Allows you to update a specific projects.
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="projectCreateOrUpdate">Request of type ProjectCreateOrUpdate</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Object>> UpdateProjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, ProjectCreateOrUpdate projectCreateOrUpdate, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->UpdateProject");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->UpdateProject");

            // verify the required parameter 'projectCreateOrUpdate' is set
            if (projectCreateOrUpdate == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectCreateOrUpdate' when calling ProjectApi->UpdateProject");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = projectCreateOrUpdate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Object>("/Projects/{projectId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateProject", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a task Allows you to update a specific task
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="taskCreateOrUpdate">The task object you are updating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTaskAsync (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, TaskCreateOrUpdate taskCreateOrUpdate, CancellationToken cancellationToken = default)
        {
             await UpdateTaskAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, taskId, taskCreateOrUpdate);

        }

        /// <summary>
        /// Allows you to update a task Allows you to update a specific task
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="taskId">You can specify an individual task by appending the id to the endpoint</param>
        /// <param name="taskCreateOrUpdate">The task object you are updating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Object>> UpdateTaskAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid taskId, TaskCreateOrUpdate taskCreateOrUpdate, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->UpdateTask");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->UpdateTask");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'taskId' when calling ProjectApi->UpdateTask");

            // verify the required parameter 'taskCreateOrUpdate' is set
            if (taskCreateOrUpdate == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'taskCreateOrUpdate' when calling ProjectApi->UpdateTask");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (taskId != null)
                requestOptions.PathParameters.Add("taskId", Xero.Net.Api.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = taskCreateOrUpdate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Object>("/Projects/{projectId}/Tasks/{taskId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates a time entry for a specific project Allows you to update time entry in a project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
        /// <param name="timeEntryCreateOrUpdate">The time entry object you are updating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTimeEntryAsync (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, TimeEntryCreateOrUpdate timeEntryCreateOrUpdate, CancellationToken cancellationToken = default)
        {
             await UpdateTimeEntryAsyncWithHttpInfo(accessToken, xeroTenantId, projectId, timeEntryId, timeEntryCreateOrUpdate);

        }

        /// <summary>
        /// Updates a time entry for a specific project Allows you to update time entry in a project
        /// </summary>
        /// <exception cref="Xero.Net.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="projectId">You can specify an individual project by appending the projectId to the endpoint</param>
        /// <param name="timeEntryId">You can specify an individual time entry by appending the id to the endpoint</param>
        /// <param name="timeEntryCreateOrUpdate">The time entry object you are updating</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.Net.Api.Client.ApiResponse<Object>> UpdateTimeEntryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid projectId, Guid timeEntryId, TimeEntryCreateOrUpdate timeEntryCreateOrUpdate, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling ProjectApi->UpdateTimeEntry");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->UpdateTimeEntry");

            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'timeEntryId' when calling ProjectApi->UpdateTimeEntry");

            // verify the required parameter 'timeEntryCreateOrUpdate' is set
            if (timeEntryCreateOrUpdate == null)
                throw new Xero.Net.Api.Client.ApiException(400, "Missing required parameter 'timeEntryCreateOrUpdate' when calling ProjectApi->UpdateTimeEntry");


            Xero.Net.Api.Client.RequestOptions requestOptions = new Xero.Net.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (projectId != null)
                requestOptions.PathParameters.Add("projectId", Xero.Net.Api.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (timeEntryId != null)
                requestOptions.PathParameters.Add("timeEntryId", Xero.Net.Api.Client.ClientUtils.ParameterToString(timeEntryId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.Net.Api.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = timeEntryCreateOrUpdate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Object>("/Projects/{projectId}/Time/{timeEntryId}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTimeEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
